package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"graphql_for_go/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
// type Todo {
//   id: ID!
//   text: String!
//   done: Boolean!
//   user: User!
// }
// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	
	var todo []*model.Todo
	var user1 = &model.User{
		ID: "1",
		Name: "John",
	}
	todo1 := &model.Todo{
		ID: "1",
		Text: "Do the laundry",
		Done: true,
		User: user1,
	} 
	todo = append(todo, todo1)
	// panic(fmt.Errorf("not implemented: Todos - todos"))
	return todo, nil
	
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
